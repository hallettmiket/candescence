RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) length(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
val2
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) length(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
# pd <- import("pandas")
# val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
### Now put the images into $OUTPUT/train and $OUTPUT/val
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
validation
validation[[1]]
validation
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) length(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
# pd <- import("pandas")
# val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
### Now put the images into $OUTPUT/train and $OUTPUT/val
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
validation
validation[[1]]
val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
val2[[1]]
pickle_data <- pd$read_pickle("/home/data/refined/candescence/train-data/final/train_white.pkl")
pickle_data
val2[[1]]
pickle_data[[48]]
val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
trai
train
validation
train[[1]]
class(train[[1]]$ann$bboxes[1,1])
class(pickle_data[[1]]$ann$bboxes[1,1])
train[[1]]
val
validation
validation[[1]]
validate[[1]]
validation[[1]]
validation
pickle_data
train[[10]]
class(pickle_data[[1]]$ann$labels)
class(validation[[1]]$ann$labels)
labels
as.array(labels)
convert_to_pickle_format <- function(res, code) {
output <- list()
for (i in 1:length(res)) {
nd <- length(output) + 1
current <- res[[i]]
tmp <- list()
tmp$filename <- current$`External ID`
tmp$width <- 1408
tmp$height <- 1040
obj <- current[4][[1]][[1]]
labels <- c()
bboxes <- matrix(0, nrow = length(obj), ncol = 4)
for (j in 1:length(obj)) {
kurrent <- obj[[j]]
labels[j] <- code[kurrent$value]
bboxes[j, 1] <- kurrent$bbox$left
bboxes[j, 3] <- kurrent$bbox$left + kurrent$bbox$width
bboxes[j, 2] <-
(tmp$height - (kurrent$bbox$top + kurrent$bbox$height))
bboxes[j, 4] <- (tmp$height - kurrent$bbox$top)
}
tmp$ann <- list()
tmp$ann$bboxes <- scale_bboxes(bboxes)
tmp$width <- 800
tmp$height <- 800
tmp$ann$labels <- as.array(labels)
output[[nd]] <- tmp
} # end of for i
return(output)
}
library(rjson)
library(reticulate)
library(tidyverse)
library(imager)
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) length(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
# pd <- import("pandas")
# val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
### Now put the images into $OUTPUT/train and $OUTPUT/val
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
validation
train
validation
class(validation[[10]]$ann$labels)
val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
val2
p <- pickle_data[[1]]
v <- validation[[1]]
p
v
p
p$filename
class(p$filename)
class(v$filename)
p$width
class(p$width)
class(v$width)
class(p$ann)
class(v$ann)
pp <- p$ann
vv <- v$ann
pp
pp
class(pp)
class(vv)
class(pp$bboxes)
class(vv$bboxes)
class(vv$bboxes[0,])
class(pp$bboxes[0,])
class(pp$bboxes[1,1])
class(vv$bboxes[1,1])
class(vv$labels)
class(pp$labels)
class(pp$labels[1])
class(vv$labels[1])
class(pp$labels)
p
class(p$ann$labels[1])
library(rjson)
library(reticulate)
library(tidyverse)
library(imager)
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) length(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
# pd <- import("pandas")
# val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
### Now put the images into $OUTPUT/train and $OUTPUT/val
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
validatino
train
class(train[[1]]$ann$bboxes)
class(train[[1]]$ann$bboxes[1,1])
class(p$ann$bboxes[1,1])
class(p$ann$labels[1])
class(train[[1]]$ann$labels[1])
library(rjson)
library(reticulate)
library(tidyverse)
library(imager)
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) length(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
# pd <- import("pandas")
# val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
### Now put the images into $OUTPUT/train and $OUTPUT/val
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
class(p$ann$labels[1])
class(train[[1]]$ann$labels[1])
train
validation
validation[[1]]$ann$labels[1]
class(validation[[1]]$ann$labels[1])
class(p$ann$bboxes[1,1])
class(validation[[1]]$ann$bboxes[1,1])
tot
length(pkl)
sum(num_cells_per_image)
length(train[[1]]$ann$bboxes)
train[[1]]$ann$bboxes
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) nrow(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
num_cells_per_image
num_train
sum(num_cells_per_image)
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
# pd <- import("pandas")
# val2<- pd$read_pickle(file.path(OUTPUT, "val_gracetc.pkl"))
### Now put the images into $OUTPUT/train and $OUTPUT/val
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
}
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
}
train
validation
train[[1]]
sum(num_cells_per_image)
num_train
validatio
validation
train
class(validation[[10]]$ann$labels[1])
class(p$ann$labels[1])
class(p$ann$labels)
class(validation[[10]]$ann$labels)
type(validation[[10]]$ann$labels)
typeof(validation[[10]]$ann$labels)
typeof(pickle_data[[10]]$ann$labels)
typeof(validation[[10]]$ann$bboxes[1,1])
typeof(pickle_data[[10]]$ann$bboxes[1,1])
typeof(validation[[10]]$filename)
typeof(validation[[10]]$width)
typeof(validation[[10]]$height)
typeof(pickle_data[[10]]$height)
typeof(pickle_data[[10]]$weight)
typeof(pickle_data[[10]]$width)
typeof(pickle_data[[10]]$filename)
typeof(validation[[10]]$ann$labels[1])
typeof(pickle_data[[10]]$ann$labels[1])
file.path(OUTPUT, "val_gracetc.pkl")
reticulate::repl_python()
v
v
which(v$ann$labels=="3")
idx <- 186
b <- v$ann$bboxes[186]
b
b <- v$ann$bboxes[186,]
b
f <- v$filename
f
im <- load.image(file.path(RAW_IMAGES, f ))
plot(im)
# install.packages("reticulate")
library(rjson)
library(reticulate)
library(tidyverse)
library(imager)
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/",
TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/gracetc"
RAW_IMAGES <- "/home/data/raw/candescence/TC_Phase/bmp"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
res
output <- list()
i <- 1
nd <- length(output) + 1
current <- res[[i]]
tmp <- list()
tmp$filename <- current$`External ID`
tmp$width <- 1408
tmp$height <- 1040
obj <- current[4][[1]][[1]]
ojb
ojb
obj
labels <- c()
bboxes <- matrix(0, nrow = length(obj), ncol = 4)
length(obj)
obj
nd
output
current <- res[[i]]
current
tmp <- list()
tmp$filename <- current$`External ID`
tmp$width <- 1408
tmp$height <- 1040
current[4]
length(current)
obj <- current[4][[1]][[1]]
obj
labels <- c()
bboxes <- matrix(0, nrow = length(obj), ncol = 4)
j <- 1
kurrent <- obj[[j]]
kurrent
for (j in 1:length(obj)) {
kurrent <- obj[[j]]
labels[j] <- as.numeric(code[kurrent$value])
bboxes[j, 1] <- as.numeric(kurrent$bbox$left)
bboxes[j, 3] <- as.numeric(kurrent$bbox$left + kurrent$bbox$width)
# bboxes[j, 2] <-
#   as.numeric(tmp$height - (kurrent$bbox$top + kurrent$bbox$height))
# bboxes[j, 4] <- as.numeric(tmp$height - kurrent$bbox$top)
bboxes[j, 2] <- as.numeric(kurrent$bbox$top)
bboxes[j, 4] <- as.numeric(kurrent$bbox$top + kurrent$bbox$height)
}
labels
bboxes[186,]
reticulate::repl_python()
