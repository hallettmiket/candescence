twibble <- add_row(twibble, tmp)
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(freq=klasses[i]) %>%
tail(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
}
twibble
top_freqs <- freqs %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, f0, f1, f2, f3, fmacro)
top_freqs <- top_freqs %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
klasses <- c('f0', 'f1', 'f2', 'f3', 'fmacro')
twibble <- tibble(klass=character(), direction=character(),
common=character(),
feature_name=character(),
description=character(),
freq=numeric(), filename=character() )
for (i in 1:5) {
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(freq=klasses[i]) %>%
head(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(freq=klasses[i]) %>%
tail(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
}
print(twibble, n=Inf)
top_freqs <- freqs %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, f0, f1, f2, f3, fmacro)
top_freqs <- top_freqs %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
klasses <- c('f0', 'f1', 'f2', 'f3', 'fmacro')
twibble <- tibble(klass=character(), direction=character(),
common=character(),
feature_name=character(),
description=character(),
freq=numeric(), filename=character() )
for (i in 1:5) {
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(freq=klasses[i]) %>%
head(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(freq=klasses[i]) %>%
tail(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
}
print(twibble, n=Inf)
top_freqs
sum_summary
twibble
top_ones <- sum_summary %>% arrange(tot) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, tot)
top_ones
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src", "grace", "init.R"))
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
tmp <-  top_ones %>% arrange(tot) %>%
select(common, feature_name, description, filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(statistic="tot") %>%
head(n=10)
top_ones
grace
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
inf
info
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(statistic="tot") %>%
head(n=10)
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, filename) %>%
relocate(common, feature_name, description) %>%
dplyr::rename(statistic="tot") %>%
head(n=10)
info
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, filename) %>%
relocate(common, feature_name, description) %>%
dplyr::rename(statistic=tot) %>%
head(n=10)
info
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, tot, filename) %>%
relocate(common, feature_name, description, tot) %>%
dplyr::rename(statistic=tot) %>%
head(n=10)
tmp
tmp$klass <- "global"
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
top_freqs <- freqs %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, f0, f1, f2, f3, fmacro)
top_freqs <- top_freqs %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
klasses <- c('f0', 'f1', 'f2', 'f3', 'fmacro')
twibble <- tibble(klass=character(), direction=character(),
common=character(),
feature_name=character(),
description=character(),
statistic=numeric(), filename=character() )
for (i in 1:5) {
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(statistic=klasses[i]) %>%
head(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(statistic=klasses[i]) %>%
tail(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
}
print(twibble, n=Inf)
top_ones <- sum_summary %>% arrange(tot) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, tot)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, tot, filename) %>%
relocate(common, feature_name, description, tot) %>%
dplyr::rename(statistic=tot) %>%
head(n=10)
tmp$klass <- "global"
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
twibble
tail(twibble)
tail(twibble, n-100)
tail(twibble, n=100)
twibble
print(twibble, n=Inf)
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, tot, filename) %>%
relocate(common, feature_name, description, tot) %>%
dplyr::rename(statistic=tot) %>%
tail(n=10)
tmp$klass <- "global"
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
print(twibble, n=Inf)
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src", "grace", "init.R"))
macro <- readRDS(macro, file=file.path(CANDESCENCE, "performance/grace_macro", "optimal_classifier.rds"))
test_events <- read_csv(file.path(macro['SAVE_RESULTS'],
paste0("test_events_",
macro['numba'], "_thresh_", macro['opt_threshold'], ".csv")))
te <- test_events
tmp_<- str_split(te$filename, pattern="_", simplify=TRUE)
for (i in 1:nrow(tmp_)) {
if (tmp_[i,1]=="TC") { tmp_[i, 2:6 ] <- tmp_[i, 3:7]; tmp_[i, 7]<- "" }
}
te$type<-ifelse(tmp_[,1]=="both", "macro", tmp_[,1])
te$replicate<-as.integer(str_split(tmp_[,2], pattern="[A-Z]+", simplify=TRUE)[,2])
te$plate <- as.integer(str_split(tmp_[,3], pattern="[A-Z]+", simplify=TRUE)[,2])
te$position<-tmp_[,4]
te <- te %>% separate( col=position, into=c("row", "column"), sep=1 )
te <- te %>% relocate(event, experiment, type, threshold, gt_class, dt_class,
plate, row, column,replicate, bbox_1, bbox_2, bbox_3, bbox_4)
te <- te %>% mutate( area = (bbox_3 - bbox_1)*(bbox_4 - bbox_2))
print(te)
write_csv(te, file.path(macro['SAVE_RESULTS'],
paste0("refined_test_events_",
macro['numba'], "_thresh_", macro['opt_threshold'], ".csv")))
filename2prcr <- te %>% select(filename, plate, row, column, replicate) %>% distinct
te
szs <- te %>% group_by(dt_class) %>% summarise(A_mean = mean(area), A_med=median(area), A_min=min(area), A_max=max(area))
print(szs)
ggplot(te %>% filter(dt_class %in% macro$important), aes(x=area, color=dt_class, fill=dt_class)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=0.6)+
#scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
#scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
labs(title="Area histogram",x="Area", y = "Density")+
theme_classic()
te <- te %>% ungroup
img_summary <- te %>% filter(dt_class %in% macro$important) %>%
group_by(filename, dt_class) %>%
dplyr::summarise( n=n(), A_mean = mean(area), A_med=median(area), A_min=min(area), A_max=max(area))
img_summary <- img_summary %>% ungroup %>% group_by(filename) %>%
mutate(total = sum(n))
img_summary<- img_summary %>% mutate(freq=n/total)
img_summary <- img_summary %>% relocate(filename, dt_class, freq )
print(img_summary)
img_summary
top_ones <- img_summary %>% arrange(A_mean) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, A_mean)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
info
img_summary
top_ones <- img_summary %>% arrange(A_mean) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, A_mean)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
info
top_ones <- img_summary %>% arrange(A_mean) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, A_mean)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
tmp <-  info %>% arrange(A_mean) %>%
select(common, feature_name, description, dt_class, A_mean, filename) %>%
relocate(common, feature_name, description, dt_class, A_mean) %>%
dplyr::rename(statistic=A_mean) %>%
head(n=30)
tmp$klass <- "area"
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
tmp <-  info %>% arrange(A_mean) %>%
select(dt_class, common, feature_name, description,  A_mean, filename) %>%
relocate( dt_class, common, feature_name, description, A_mean) %>%
dplyr::rename(statistic=A_mean, klass=dt_class) %>%
head(n=30)
tmp
top_ones <- img_summary %>% arrange(A_mean) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, A_mean)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
tmp <-  info %>% arrange(A_mean) %>%
select(dt_class, common, feature_name, description,  A_mean, filename) %>%
relocate( dt_class, common, feature_name, description, A_mean) %>%
dplyr::rename(statistic=A_mean, klass=dt_class) %>%
head(n=30)
tmp$direction <- "low"
tmp$klass <- paste0("area_", tmp$klass)
twibble <- add_row(twibble, tmp)
tail(twibble)
top_freqs <- freqs %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, f0, f1, f2, f3, fmacro)
top_freqs <- top_freqs %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
klasses <- c('f0', 'f1', 'f2', 'f3', 'fmacro')
twibble <- tibble(klass=character(), direction=character(),
common=character(),
feature_name=character(),
description=character(),
statistic=numeric(), filename=character() )
for (i in 1:5) {
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(statistic=klasses[i]) %>%
head(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
tmp <-  top_freqs %>% arrange(.[,klasses[i]]) %>%
select(common, feature_name, description, klasses[i], filename) %>%
relocate(common, feature_name, description, klasses[i]) %>%
dplyr::rename(statistic=klasses[i]) %>%
tail(n=10)
tmp$klass <- klasses[i]
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
}
print(twibble, n=Inf)
top_ones <- sum_summary %>% arrange(tot) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, tot)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, tot, filename) %>%
relocate(common, feature_name, description, tot) %>%
dplyr::rename(statistic=tot) %>%
head(n=10)
tmp$klass <- "global"
tmp$direction <- "low"
twibble <- add_row(twibble, tmp)
tmp <-  info %>% arrange(tot) %>%
select(common, feature_name, description, tot, filename) %>%
relocate(common, feature_name, description, tot) %>%
dplyr::rename(statistic=tot) %>%
tail(n=10)
tmp$klass <- "global"
tmp$direction <- "high"
twibble <- add_row(twibble, tmp)
top_ones <- img_summary %>% arrange(A_mean) %>%
inner_join(filename2prcr, by="filename") %>%
relocate(plate, row, column, replicate, A_mean)
info <- top_ones %>% left_join(grace,
by=c("plate"="plate", "row"="row", "column"="column"))
tmp <-  info %>% arrange(A_mean) %>%
select(dt_class, common, feature_name, description,  A_mean, filename) %>%
relocate( dt_class, common, feature_name, description, A_mean) %>%
dplyr::rename(statistic=A_mean, klass=dt_class) %>%
head(n=30)
tmp$direction <- "low"
tmp$klass <- paste0("area_", tmp$klass)
twibble <- add_row(twibble, tmp)
tmp <-  info %>% arrange(A_mean) %>%
select(dt_class, common, feature_name, description,  A_mean, filename) %>%
relocate( dt_class, common, feature_name, description, A_mean) %>%
dplyr::rename(statistic=A_mean, klass=dt_class) %>%
tail(n=30)
tmp$direction <- "high"
tmp$klass <- paste0("area_", tmp$klass)
twibble <- add_row(twibble, tmp)
twibble
tail(twibble)
inf
info
info %>% filter(replicate==1, plate==1, row=="B", column=="1")
grace %>% filter(replicate==1, plate==1, row=="B", column=="1")
grace
grace %>% filter(plate==1, row=="B", column=="1")
grace %>% filter(plate==1, row=="B", column=="1") %>% .[['description']]
install.packages("nycflight13")
install.packages("nycflights13")
libary(nycflights13)
library(nycflights13)
flights
filter(flights, month == 1, day == 1)
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src", "grace", "init.R"))
tc <- readRDS(tc, file=file.path(CANDESCENCE, "performance/grace_tc", "optimal_classifier.rds"))
tc
grace %>% filter(plate==1, row=="D", column=="11") %>% .[['description']]
grace %>% filter(plate==1, row=="F", column=="11") %>% .[['description']]
grace %>% filter(plate==1, row=="B", column=="9") %>% .[['description']]
grace %>% filter(plate==1, row=="D", column=="1") %>% .[['description']]
tc
tc$important
tc$SAVE_RESULTS
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src", "grace", "init.R"))
te <- test_events
tmp_<- str_split(te$filename, pattern="_", simplify=TRUE)
tmp_
head(tmp)
head(tmp_)
tail(tmp_test_events <- read_csv(file.path(tc['SAVE_RESULTS'],
paste0("test_events_",
tc['numba'], "_thresh_", tc['opt_threshold'], ".csv")))
te)
test_events <- read_csv(file.path(tc['SAVE_RESULTS'],
paste0("test_events_",
tc['numba'], "_thresh_", tc['opt_threshold'], ".csv")))
te
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src", "grace", "init.R"))
tc <- readRDS(tc, file=file.path(CANDESCENCE, "performance/grace_tc", "optimal_classifier.rds"))
test_events <- read_csv(file.path(tc['SAVE_RESULTS'],
paste0("test_events_",
tc['numba'], "_thresh_", tc['opt_threshold'], ".csv")))
te <- test_events
tc_files_raw <- list.files(file.path(INPUT, "TC_Phase"), pattern=".tif", full.name=TRUE)
tc_files <- str_split(tc_files_raw, "/", simplify=TRUE)[,8]
sans_tif_tc_files <- str_split(tc_files, "\\.", simplify=TRUE)[,1]
INPUT <- "/home/data/raw/candescence/full_set_raw"
BASE_OUTPUT <- "/home/data/refined/candescence/grace"
fluor_files <- list.files(file.path(INPUT, "Macrophage_FITC"), pattern=".tif", full.name=TRUE)
macro_files <- list.files(file.path(INPUT, "Macrophage_Merge"), pattern=".tif", full.names=TRUE)
f_files <- str_split(fluor_files, "_")
m_files <- str_split(macro_files, "_")
all_test_files <- list.files(file.path(BASE_OUTPUT, "grace_tc_all_images", "bmp_orig_dim"))
all_test_files <- str_split(all_test_files, pattern="TC_Phase_", simplify=TRUE)[,2]
all_test_files <- str_split(all_test_files, pattern="\\.", simplify=TRUE)[,1]
train_filenames <- str_split(train_filenames, pattern="TC_Phase_", simplify=TRUE)[,2]
train_filenames <- str_split(train_filenames, pattern="\\.", simplify=TRUE)[,1]
validation_filenames <- str_split(validation_filenames, pattern="TC_Phase_", simplify=TRUE)[,2]
validation_filenames <- str_split(validation_filenames, pattern="\\.", simplify=TRUE)[,1]
final_test_files <- all_test_files
for (i in 1:length(final_test_files)) {
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp")))
im2 <- imsub(im,x > orig_width) %>% plot
thmb <- resize(im2,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "test", paste0("TC_Phase_", final_test_files[i], ".bmp")))
}
RAW_IMAGES <- "/home/data/refined/candescence/grace/grace_tc_all_images/bmp_orig_dim"
target_image_size <- 800
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
for (i in 1:length(final_test_files)) {
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp")))
im2 <- imsub(im,x > orig_width) %>% plot
thmb <- resize(im2,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "test", paste0("TC_Phase_", final_test_files[i], ".bmp")))
}
tc
i
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp")))
im
orig_width <- 1408
orig_height <- 1040
for (i in 1:length(final_test_files)) {
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp")))
im2 <- imsub(im,x > orig_width) %>% plot
thmb <- resize(im2,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "test", paste0("TC_Phase_", final_test_files[i], ".bmp")))
}
i
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp")))
im2 <- imsub(im,x > orig_width) %>% plot
for (i in 1:length(final_test_files)) {
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp"))) %>% plot
thmb <- resize(im2,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "test", paste0("TC_Phase_", final_test_files[i], ".bmp")))
}
for (i in 1:length(final_test_files)) {
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp"))) %>% plot
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "test", paste0("TC_Phase_", final_test_files[i], ".bmp")))
}
OUTPUT <- "/home/data/refined/candescence/train-data/grace_tc"
for (i in 1:length(final_test_files)) {
im <- load.image(file.path(RAW_IMAGES, paste0("TC_Phase_", final_test_files[i], ".bmp"))) %>% plot
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "test", paste0("TC_Phase_", final_test_files[i], ".bmp")))
}
library(rjson)
library(reticulate)
library(tidyverse)
library(imager)
options(warn = -1)
set.seed(42)
root <- rprojroot::find_root(".git/index");
source(file.path(root, "src/grace/init.R"))
TARGET_FILE <- "gracetc-2021-09-24.json"
TARGET <- file.path("/home/data/refined/candescence/grace/", TARGET_FILE)
OUTPUT <- "/home/data/refined/candescence/train-data/grace_tc"
RAW_IMAGES <- "/home/data/refined/candescence/grace/grace_tc_all_images/bmp_orig_dim"
target_image_size <- 800
orig_width <- 1408
orig_height <- 1040
code <- 0:6
names(code) <- c("c0", "c1", "c2",   "time",   "unknown", "artifact", "c3" )
train_frac <- 0.8
res <- fromJSON(file=TARGET)
pkl <- convert_to_pickle_format(res, code) # default 800 x 800 conversion
num_cells_per_image <- unlist(lapply(pkl, FUN=function(x) nrow(x$ann$bboxes)))
num_train <- floor(train_frac*sum(num_cells_per_image))
tot <- 0; avail <- 1:length(pkl); train_idx<-c()
while (tot < num_train) {
choice <- sample(avail, 1)
avail <- setdiff(avail, choice); tot<-tot+num_cells_per_image[choice]
train_idx <- c(train_idx, choice)
}
validation_idx <- setdiff(1:length(pkl), train_idx)
train <- pkl[train_idx]; validation <- pkl[validation_idx]
py_save_object(train, filename = file.path(OUTPUT, "train_gracetc.pkl"), pickle="pickle")
py_save_object(validation, filename = file.path(OUTPUT, "val_gracetc.pkl"), pickle="pickle")
file.remove(file.path(OUTPUT, "train", list.files(file.path(OUTPUT, "train"))))
file.remove(file.path(OUTPUT, "val", list.files(file.path(OUTPUT, "val"))))
train_filenames <- c()
for (i in 1:length(train)) {
im <- load.image(file.path(RAW_IMAGES, train[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "train", train[[i]]$filename))
train_filenames <- c(train_filenames, train[[i]]$filename)
}
validation_filenames <- c()
for (i in 1:length(validation)) {
im <- load.image(file.path(RAW_IMAGES, validation[[i]]$filename))
thmb <- resize(im,target_image_size, target_image_size)
save.image(thmb, file.path(OUTPUT, "val", validation[[i]]$filename))
validation_filenames <- c(validation_filenames, validation[[i]]$filename)
}
validation_filenames
traitraintrain_filenames
train_filenames
